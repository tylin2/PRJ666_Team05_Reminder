{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Documents\\\\GitHub\\\\PRJ666_Team05_Reminder\\\\client\\\\src\\\\pages\\\\tasks\\\\tasks.js\";\nimport React, { Component } from 'react';\nimport { Row, Col, ProgressBar } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Tasks extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateTaskList = taskValue => {\n      const prevTaskList = this.state.taskList.slice();\n      const updatedTaskList = [...prevTaskList, ...[{\n        key: Date.now(),\n        task: taskValue,\n        completed: false\n      }]];\n      const computeUpdatedProgress = this.computeProgress(updatedTaskList);\n      this.setState({\n        progress: computeUpdatedProgress,\n        taskList: updatedTaskList\n      });\n    };\n\n    this.handleTaskClick = key => {\n      const prevTaskList = this.state.taskList.slice();\n      const completedTasks = prevTaskList.map(task => {\n        if (task.key === key) {\n          task.completed = !task.completed;\n        }\n\n        return task;\n      });\n      const computeUpdatedProgress = this.computeProgress(completedTasks);\n      this.setState({\n        progress: computeUpdatedProgress,\n        taskList: completedTasks\n      });\n    };\n\n    this.handleCompletedTasks = () => {\n      const prevTaskList = this.state.taskList.slice();\n      const unCompletedTasks = prevTaskList.filter(task => !task.completed);\n      this.setState({\n        taskList: unCompletedTasks,\n        progress: 0\n      });\n    };\n\n    this.state = {\n      taskList: [],\n      progress: 0\n    };\n  }\n\n  computeProgress(taskList) {\n    let completed = 0;\n    taskList.forEach(task => {\n      if (task.completed) {\n        completed++;\n      }\n    });\n    const progress = (completed / taskList.length).toFixed(2);\n    return progress * 100;\n  }\n\n  render() {\n    const jumbotronInstance = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        className: \"show-grid\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          xs: 6,\n          md: 4\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          xs: 6,\n          md: 4,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"InputElements\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"To Do List\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(AddTask, {\n              updatedTaskList: this.updateTaskList,\n              handleCompletedTasks: this.handleCompletedTasks\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"taskProgressBar\",\n              children: /*#__PURE__*/_jsxDEV(ProgressBar, {\n                active: true,\n                now: this.state.progress,\n                label: `${this.state.progress}%`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"taskListElements\",\n            children: /*#__PURE__*/_jsxDEV(ListItems, {\n              tasks: this.state.taskList,\n              handleTaskClick: this.handleTaskClick\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          xsHidden: true,\n          md: 4\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: jumbotronInstance\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/HP/Documents/GitHub/PRJ666_Team05_Reminder/client/src/pages/tasks/tasks.js"],"names":["React","Component","Row","Col","ProgressBar","Tasks","constructor","props","updateTaskList","taskValue","prevTaskList","state","taskList","slice","updatedTaskList","key","Date","now","task","completed","computeUpdatedProgress","computeProgress","setState","progress","handleTaskClick","completedTasks","map","handleCompletedTasks","unCompletedTasks","filter","forEach","length","toFixed","render","jumbotronInstance"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { Row, Col, ProgressBar } from \"react-bootstrap\";\r\n\r\nexport default class Tasks extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            taskList: [],\r\n            progress: 0 \r\n        }\r\n    }\r\n\r\n    updateTaskList = (taskValue) => {\r\n        const prevTaskList = this.state.taskList.slice();\r\n        const updatedTaskList = [...prevTaskList, ...[{ key: Date.now(), task: taskValue, completed: false }]];\r\n        const computeUpdatedProgress = this.computeProgress(updatedTaskList);\r\n\r\n        this.setState({\r\n            progress: computeUpdatedProgress,\r\n            taskList: updatedTaskList,\r\n        })\r\n    }\r\n\r\n    computeProgress(taskList) {\r\n        let completed = 0;\r\n        taskList.forEach(task => {\r\n            if(task.completed) {\r\n                completed++;\r\n            }\r\n        });\r\n\r\n        const progress = (completed / taskList.length).toFixed(2);\r\n        return progress * 100;\r\n    }\r\n\r\n    handleTaskClick = (key) => {\r\n        const prevTaskList = this.state.taskList.slice();\r\n        const completedTasks = prevTaskList.map(task => {\r\n            if(task.key === key) {\r\n                task.completed = !task.completed;\r\n            }\r\n            return task;\r\n        });\r\n        \r\n        const computeUpdatedProgress = this.computeProgress(completedTasks);\r\n\r\n        this.setState({\r\n            progress: computeUpdatedProgress,\r\n            taskList: completedTasks,\r\n        })\r\n    }\r\n\r\n    handleCompletedTasks = () => {\r\n        const prevTaskList = this.state.taskList.slice();\r\n        const unCompletedTasks = prevTaskList.filter(task => !task.completed);\r\n\r\n        this.setState({\r\n            taskList: unCompletedTasks,\r\n            progress: 0\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const jumbotronInstance = (\r\n            <div>\r\n                <Row className=\"show-grid\">\r\n                    <Col xs={6} md={4}></Col>\r\n                    <Col xs={6} md={4}>\r\n\r\n                        <div className=\"InputElements\">\r\n                            <h3>To Do List</h3>\r\n                            <AddTask updatedTaskList={this.updateTaskList} handleCompletedTasks={this.handleCompletedTasks} />\r\n                            <div className=\"taskProgressBar\">\r\n                                <ProgressBar active now={this.state.progress} label={`${this.state.progress}%`} />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"taskListElements\">\r\n                            <ListItems tasks={this.state.taskList} handleTaskClick={this.handleTaskClick} />\r\n                        </div>\r\n\r\n                    </Col>\r\n                    <Col xsHidden md={4}></Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                {jumbotronInstance}\r\n            </div>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}